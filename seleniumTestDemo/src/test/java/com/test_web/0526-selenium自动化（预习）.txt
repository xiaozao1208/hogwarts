5月27日 selenium自动化（预习）

1.selenium的安装和使用

selenium的简介
    Selenium支持web浏览器的自动化。它主要包含三个工具：webDriver,IDE,Grid
    官网：https://www.selenium.dev/
    selenium 支持多语言，通过驱动driver驱动浏览器进行操作浏览器；

    selenium的环境
        java 1.8
        maven 3.6
        idea

Driver的配置
    介绍 https://www.selenium.dev/documentation/en/webdriver/driver_requirements/
    下载 有chrome浏览器版本匹配的版本下载 https://chromedriver.storage.googleapis.com/index.html?path=81.0.4044.138/
    备注：此处浏览器升级以后，对应的驱动也需要更新；

    安装 放在对应的包下面；liunx版本需要配置环境变量；

2、Selenium IDE 的下载与安装
    官网：https://www.selenium.dev
    chrome插件  国内不支持
    firefox插件 https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/
    先下载火狐浏览器，再下载火狐版的selenium IDE

    github release: https://github.com/SeleniumHQ/selenium-ide/release

3、selenium测试用例编写
    爱测登录案例

4、selenium
    具体见 Aice.java
1.隐式等待与显式等待
    1.1 强制等待/直接等待    线程休眠一定时间
    代码： Thread.sleep(2000);  //这里的单位是毫秒
    缺点：无法捕捉短时间存在的元素，不推荐使用

    1.2 隐式等待  设置一个等待时间，轮询查找（默认0.5s）元素是否存在，如果没有出现就抛异常
    driver.manage().timeouts().implicitlyWait(5,TimeUnit.SECONDS);  //这个是等待5s 单位可以不同

    1.3 显式等待
    在代码中定义等待条件，当条件发生的时才继续执行代码
    代码：WebDriverWait配合until()方法
    根据判断条件进行等待程序每隔一段时间（默认是0.5s）进行判断，如果条件成立，则执行下一步，否则继续等待，直到超过设置的最长时间。

    隐式等待---针对全局；
    显式等待---对单个元素


2.web控件定位与常见操作
   2.1 id,name,css selector
   2.2 xpath

   2.1 id,name,css selector
   可以用于 appium,selenium  缺点：appium 原生控件不支持css selector
    $(#kw)
   driver.findElement(By.id("kw")).sendKeys("姜子牙");
   driver.findElement(By.id("su")).click();

    选择器		例子		例子描述
    .class		.intro		选择class="intro"的所有元素
    #id			#firstName	选择id="firstName"的所有元素
    *			*			选择所有元素
    element		p			选择所有<p> 元素
    element，element div,p	选择所有<div>元素和所有的<p>元素//
    element element  div p	选择所有<div>元素内部的所有的<p>元素/
    element>element  div>p  选择父元素为<div>元素的所有<p>元素
    element+element  div+p	选择紧接在<div>元素之后的所有<p>元素

    [attribute] 	 [target]   	选择带有target属性的所有元素
    [attribute=value][target=blank]	选择带有target=blank属性的所有元素
    :nth-child(n)	p:nth-child(2)  选择属于其父元素的第二个子元素的每个<p>元素
    element1~element2 p~ul			选择前面有<p>元素的而每个<ul>元素



    2.2 xpath  XML path language  用于解析html和xml
        可以用于 appium，selenium ; 缺点：是从头到尾的遍历，速度慢；
        $x("")

    /bookstore/book[1]
    /bookstore/book[last()]
    /bookstore/book[last()-1]
    //title[@lang='eng']  选取所有title元素，且这些元素拥有值为eng的lang属性

    nodename   选取此节点的所有子节点
    /         从跟节点选取
    //        从匹配选择的当前节点选择文档中的节点，而不考虑他们的位置；
    .         选取当前节点
    ..        选取当前节点的父节点
    @         选取属性

    /bookstore/book     查询bookstore的子内容；
    /bookstore//book    查询bookstore的子孙内容，更多

3.web控件的交互进阶
    常见的操作事件（右键点击，页面滑动，表单操作等）

    官网文档：https://www.selenium.dev/selenium/docs/api/java/index.html
    Actions ： 执行PC端的鼠标的点击，双击，右键，拖拽等事件
    TouchActions: 模拟PC和移动端的点击，滑动，拖拽，多点触控扥多种手势操作。 不使用，使用js

  动作链接Actions:
    执行原理:调用Actions的方法是，不会立即执行，而是将所有的操作 ，按照顺序放在一个队列里，
    当你调用perform()方法时，队列找那个的事件会依次执行。
    基本用法：
    生成一个动作Actions action = new Actions();
    动作添加方法1， actions.方法1
    动作添加方法2， actions.方法2
    调用perform()方法执行actions.perform();

  具体写法：
    链式写法：Actions actions = new Actions(driver).moveToElement(ele).click().perform(ele);
    分布写法：Actions actions = new Actions();
             actions.move_to_element(element);
             actions.click(element);
             actions.perform();

    练习网址：http://sahitest.com/demo/clicks.htm

    表单操作：登录的账号密码练习
    具体见：InteractiveTest.java

    鼠标的悬浮移动：
    找到百度的设置,将光标悬停在设置上面

    将一个元素 拖拽到另一个元素的位置上
    具体见：InteractiveTest.java

    使用键盘操作   谷歌浏览器不支持，火狐支持
    具体见：InteractiveTest.java

    页面的滚动 scroll,页面滑动，需要使用js;
    具体见：InteractiveTest.java


4.网页frame与多窗口处理
    具体类：WindowsTest.java
    具体类：FrameTest.java

    多窗口处理
       点击某些链接，会重新打开一个窗口，对于这种情况，想在新页面上进行操作，就需要先切换窗口。
       获取窗口的唯一标识用句柄来表示，所以只需要切换句柄，就可以多页面进行操作。

    多窗口的处理流程
    1.先获取当前的窗口句柄driver.getWindowHandle()
    2.获取所有窗口的句柄；driver.getWindowHandles()
    3.判断获取窗口句柄是否是我想要的，如果是，对页面进行操作；如果不是，进行下一个对比；

    百度账号密码登录 //*[@id="u1"]/a[2]
    具体类：WindowsTest.java

    Frame的处理
        在web自动化中，如果元素定位不到，很大可能是在iframe中。
        frame的定义：
            frame是html的框架，在html中，所谓的框架就是可以在同一个浏览器中显示不止一个页面
            基于html的框架，又分为垂直框架和水平框架（cols,rows）
        fram的分类：
            frame标签分为 frameset,frame,iframe三种
            frameset和普通标签一样，不会影响正常的定位，可以使用index，id,name,webelement 任意方式定位frame
            而frame与iframe对selenium定位是一样的， selenium有一组方法对frame进行操作。frame有嵌套的和未嵌套的；

        未嵌套的frame
            driver.switchTo().frame(frame的id)
            driver.switchTo().frame("frame_index") frame无ID的时候依据索引来处理，索引从0开始；

        嵌套的frame和iframe
            对于嵌套的先进入iframe的父节点，再进入子节点，然后可以对子节点里面的对象进行处理和操作
            driver.switchTo().frame("父节点")
            driver.switchTo().frame("子节点")
        具体类：FrameTest.java

5.selenium多浏览器处理
     具体类:BaseTest.java  BrowserTest.java
     browser="chrome" mvn -Dtest=BrowserTest test
     ?? 熟悉mvn  命令的pom配置 熟悉命令写法
     执行上面命令 pom文件的配置：
     <!--执行测试类插件-->
                 <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-surefire-plugin</artifactId>
                     <version>2.22.2</version>
                     <configuration>
                         <testFailureIgnore>true</testFailureIgnore>
                     </configuration>
                 </plugin>


6.执行javaScript脚本
    具体类：JSTest.java
  使用selenium直接在当前页面中进行js交互
    常用的几种操作 使用js实现

  selenium如何调用js?
    execute_script:执行js
    return 可以返回js的返回结果
    execute_script: arguments 传参

  js处理-案例-时间控件
    大部分时间控件都是readonly属性，需手动选择时间。手工测试容易做到，自动化对控件的操作可以使用js来操作。
    处理时间控件的思路：
        1.取消日期的readonly属性
        2.给value赋值
          写js代码来实现如上1,2两点，再webDriver对js进行处理

7.文件上传弹框处理
    具体类：UpLoadTest.java
    input标签可以直接使用使用 send_keys(文件地址) 上传文件
    用法：driver.findElement(By.xpath("")).sendKeys("路径");

    弹框的处理机制：
    在页面操作中有时会遇到JavaScript所生产的alert,confirm,prompt弹框，
    可以使用switchTo().alert定位到。然后使用text/accept/dismiss/send_keys等方法进行操作

    操作alert常用的方法：
        driver.switchTo().alert(); 获取当前页面上的警告框
        text: 返回alert/confirm/prompt 中的文字信息
        accept():接受现有警告框
        dismiss() 解散现有的警告框
     具体类： AlertTest.java

8.page object设计模式
    what? and  history?

    案例：操作和断言 都改变，很麻烦；
    解决方案:pageObject

        案例：
        操作细节
        结果验证
        操作细节
        结果验证

    核心思想：
        只为核心页面的核心功能做封装； 分不同的页面， 页面和细节是分开的；
        如果有断言，页面和断言进行分开。
        只要有UI界面，都可以使用PO(Page Object模式)

    selenium的官方文档：阅读关于PO的介绍；

9.page object原则

    官网 PO 原则
        一个 public 方法代表一个公共的服务。就是说一个方法代替页面上的某个操作
        PageObject 中的方法细节不可暴露在外，通过提供公共服务接口的形式提供给外部
        一般不需要在 PageObject 中断言
        当有页面跳转的操作时候，执行这个方法时应该在方法结束返回时能够跳转到另一个页面中
        我们只需要对页面中我们需要的重要的内容进行封装
        页面中相同的组件，但是不同的操作应该要被拆成不同的方法进行封装






元素定位-
chrome-检查-Console
clear()
$x('')   ----使用xpath定位



